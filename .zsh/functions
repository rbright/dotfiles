#!/usr/bin/env zsh
# Perform an ls -la after switching directories, because I'm going to do it.
function cd {
  builtin cd "$@" && ls -la;
}

# Count the total number of lines in files containing the given extension
# $1 - File extension
function countlines () {
  find . -name "*.$1" | xargs wc -l;
}

# Remove Docker images in the "dangling" state
function dockerclean () {
  docker rm `docker ps --no-trunc -aq`
  docker images -q --filter "dangling=true" | xargs docker rmi
}

# Disable "Downloaded from Internet warnings" in Mac OS X
function downloadwarnings() {
  if [[ `uname` == 'Darwin' ]]; then
    defaults write com.apple.LaunchServices LSQuarantine -bool NO
  fi
}

# Flush the DNS cache in Mac OS X
function fd () {
  if [[ `uname` == 'Darwin' ]]; then
    dscacheutil -flushcache;
  fi
}

# Flush everything in memcached
function fm() {
  echo "flush_all" | nc 127.0.0.1 11211
}

# Set the level of font smoothing in Mac OS X
# $1 - Integer representing the level of font smoothing (0-3)
function fontsmoothing () {
  if [[ `uname` == 'Darwin' ]]; then
    defaults -currentHost write -globalDomain AppleFontSmoothing -int $1;
  fi
}

# Fetch all contents from the specified website
# $1 - URL for the specified website
function getsite () {
  wget --recursive --page-requisites --convert-links -U 'Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.1.6) Gecko/20070802 SeaMonkey/1.1.4' $1;
  if [[ `uname` == 'Darwin' ]]; then
    terminal-notifier -message "Download of $1 completed successfully" -title "Site Downloaded";
  fi
}

# Kill all processes using the given directory
# $1 - String representing the directory
function killdir () {
  lsof | grep $1 | awk '{print $2}' | xargs kill;
}

# Display man pages in vim for syntax highlighting.
function man() {
  /usr/bin/man $* | \
      col -b | \
        vim -R -c 'set ft=man nomod nolist' -
}

# Make a directory and change to it
function mcd () {
  mkdir -p "$@" && eval cd "\"\$$#\"";
}

# Notify the UI
function notify() {
  terminal-notifier -message "$1" -title "Terminal Notifier"
}

# Open the specified gem in MacVim
function og() {
  pushd `bundle show $1`
  vim
}

# Clear duplicates from the "Open With" menu in OS X.
function openwithdups() {
  if [[ `uname` == 'Darwin' ]]; then
    /System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user
  fi
}

# Update all rbenv plugins
function rbenv-update () {
  for directory in `find $HOME/.rbenv/plugins -maxdepth 1 -type d`
  do
    pushd $directory
      git pull origin master;
    popd
  done
}

# Remove vim undo files from the current directory
function rmundo () {
  find . -name "*.un~" -exec rm -f {} \;
}

# Show/hide hidden files in Mac OS X
# $1 - Boolean for showing (true) or hiding (false) hidden files
function showhiddenfiles () {
  if [[ `uname` == 'Darwin' ]]; then
    defaults write com.apple.finder AppleShowAllFiles $1;
    killall Finder;
  fi
}

# Monitor the TCP traffic on the specified port
# $1 - Integer representing the TCP port to be monitored
function tcpmonitor () {
  sudo /usr/sbin/tcpdump -ln -A -s1024 -i $1 tcp port $2;
}

function testscomplete() {
  terminal-notifier -message "Your tests are done!" -title "Party Time!" -activate "com.googlecode.iterm2" -sender "com.googlecode.iterm2"
}

# Remove vim plugins not included in vimrc
function vim-clean () {
  vim -c "execute \"BundleClean!\" | q | q"
}

# Update vim plugins
function vim-update () {
  vim -c "execute \"BundleInstall!\" | q | q";
}

# Update oh-my-zsh
function zsh-update () {
  pushd "$HOME/.oh-my-zsh"
    git pull origin master
  popd
}
